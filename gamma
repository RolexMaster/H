import ctypes
import time

class GammaFadeController:
    def __init__(self, delay=0.05):
        self.hdc = ctypes.windll.user32.GetDC(0)
        self.original_gamma = self._get_gamma_ramp()
        self.delay = delay

    def _get_gamma_ramp(self):
        ramp = (ctypes.c_ushort * 256 * 3)()
        ctypes.windll.gdi32.GetDeviceGammaRamp(self.hdc, ctypes.byref(ramp))
        return ramp

    def _set_gamma_ramp(self, ramp):
        ctypes.windll.gdi32.SetDeviceGammaRamp(self.hdc, ctypes.byref(ramp))

    def _generate_ramp(self, factor):
        ramp = (ctypes.c_ushort * 256 * 3)()
        for i in range(256):
            value = int(i * 256 * factor)
            value = min(max(value, 0), 65535)
            ramp[0][i] = value
            ramp[1][i] = value
            ramp[2][i] = value
        return ramp

    def fade_to_black(self, steps=20):
        """서서히 화면 어둡게"""
        print("화면을 점진적으로 어둡게 만드는 중...")
        for i in reversed(range(1, steps + 1)):
            factor = i / steps
            ramp = self._generate_ramp(factor)
            self._set_gamma_ramp(ramp)
            time.sleep(self.delay)

    def restore(self, steps=20):
        """서서히 원래 밝기로 복원"""
        print("화면 밝기를 복원하는 중...")
        for i in range(1, steps + 1):
            factor = i / steps
            ramp = self._generate_ramp(factor)
            self._set_gamma_ramp(ramp)
            time.sleep(self.delay)

# 예제
if __name__ == "__main__":
    gf = GammaFadeController(delay=0.05)
    gf.fade_to_black(steps=30)
    time.sleep(2)
    gf.restore(steps=30)
