SOLID 원칙

객체 지향 소프트웨어 설계에서 SOLID 원칙은 유지보수성과 확장성을 향상시키기 위한 대표적인 설계 지침으로 널리 사용된다.
해당 원칙은 다음의 다섯 가지 구성 요소로 이루어져 있다: 단일 책임 원칙, 개방-폐쇄 원칙, 리스코프 치환 원칙, 인터페이스 분리 원칙, 의존성 역전 원칙.

이들 원칙은 특히 C++과 같은 객체 지향 언어에서 소프트웨어의 유지보수성, 확장성, 유연성을 높이고,
견고하고 적응력 있는 코드를 작성하기 위한 지침으로 기능한다.

따라서 SOLID 원칙은 소프트웨어 설계 품질을 체계적으로 향상시키고, 기술 부채를 감소시키며,
복잡한 시스템에서도 변화에 강한 구조를 유지할 수 있는 설계 기반을 제공한다.
