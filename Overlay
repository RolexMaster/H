import tkinter as tk
import time
import ctypes
from ctypes import wintypes

def get_monitors_winapi():
    monitors = []

    def callback(hMonitor, hdcMonitor, lprcMonitor, dwData):
        r = lprcMonitor.contents
        monitors.append({
            "x": r.left,
            "y": r.top,
            "width": r.right - r.left,
            "height": r.bottom - r.top
        })
        return 1

    MONITORENUMPROC = ctypes.WINFUNCTYPE(
        ctypes.c_int,
        wintypes.HMONITOR,
        wintypes.HDC,
        ctypes.POINTER(wintypes.RECT),
        wintypes.LPARAM
    )

    ctypes.windll.user32.EnumDisplayMonitors(
        0, 0, MONITORENUMPROC(callback), 0
    )

    return monitors

class FadeOverlay:
    def __init__(self, root, monitor, max_opacity=0.9, steps=30, delay=50, duration_sec=3):
        self.root = root
        self.monitor = monitor
        self.max_opacity = max_opacity
        self.steps = steps
        self.delay = delay
        self.duration_sec = duration_sec

        self.win = tk.Toplevel(self.root)
        self.win.overrideredirect(True)
        self.win.geometry(f"{monitor['width']}x{monitor['height']}+{monitor['x']}+{monitor['y']}")
        self.win.attributes("-topmost", True)
        self.win.attributes("-alpha", 0.0)
        self.win.configure(bg="black")

    def start(self):
        self.fade_in(0)

    def fade_in(self, step):
        if step > self.steps:
            self.win.after(int(self.duration_sec * 1000), lambda: self.fade_out(self.steps))
            return
        alpha = (step / self.steps) * self.max_opacity
        self.win.attributes("-alpha", alpha)
        self.win.after(self.delay, lambda: self.fade_in(step + 1))

    def fade_out(self, step):
        if step < 0:
            self.win.destroy()
            return
        alpha = (step / self.steps) * self.max_opacity
        self.win.attributes("-alpha", alpha)
        self.win.after(self.delay, lambda: self.fade_out(step - 1))

def show_fade_overlay_all_monitors(duration_sec=3, max_opacity=0.85, steps=40, delay=30):
    monitors = get_monitors_winapi()
    root = tk.Tk()
    root.withdraw()  # 루트 창 숨김

    overlays = []
    for monitor in monitors:
        overlay = FadeOverlay(
            root,
            monitor,
            max_opacity=max_opacity,
            steps=steps,
            delay=delay,
            duration_sec=duration_sec
        )
        overlay.start()
        overlays.append(overlay)

    root.mainloop()

# 실행
if __name__ == "__main__":
    show_fade_overlay_all_monitors(duration_sec=3, max_opacity=0.85, steps=40, delay=30)
