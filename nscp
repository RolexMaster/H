본 연구에서는 연동 구조의 표준화 및 모듈화를 통해 함정전투체계 소프트웨어의 유지보수성과 재사용성을 향상시키기 위한 기반 아키텍처로 **NSCP(Naval Shield Component Platform)**를 적용하였다. NSCP는 SOLID 설계 원칙에 기반한 4계층 구조의 연동 소프트웨어 플랫폼으로, 함정 내 다양한 기능 간의 연결을 구조적으로 분리하고, 외부 체계와의 통신 또한 표준화된 방식으로 처리할 수 있도록 설계되었다.

NSCP는 Interface Manager, Message Converter, Function Manager, Subfunction Manager의 네 가지 핵심 컴포넌트로 구성되며, 각 컴포넌트는 명확한 책임 분리를 기반으로 연동 흐름을 처리한다. Interface Manager는 외부 통신 인터페이스 역할을 수행하며, 수신 데이터의 수집과 송신 API 호출을 담당한다. Message Converter는 외부 데이터와 NSCP 내부 메시지 간의 상호 변환을 수행하며, 변환된 데이터는 Function Manager를 통해 Subfunction Manager로 전달되어 기능별 세부 처리가 수행된다.

기존 함정전투체계 소프트웨어의 구조적 한계를 개선하기 위한 수단으로 NSCP를 적용한 결과, 공통 클래스로 처리되는 코드의 비중이 약 8%에서 66%로 증가하였고, 단일 메시지 변경 시 전체 소스 코드 구조에 영향을 미치는 비율은 38%에서 13%로 감소하는 성능 개선이 확인된 바 있다. 이러한 구조적 변화는 기능 간 결합도를 낮추고, 신규 기능의 추가 및 유지보수 시 영향을 최소화할 수 있는 기반을 제공한다.




NSCP는 전투체계 내부 기능과 외부 연동 체계 간의 통신을 구조적으로 분리하고, 데이터 흐름을 표준화된 방식으로 처리하기 위해 네 개의 주요 컴포넌트로 구성된다. 각 컴포넌트는 명확한 기능 분담을 기반으로 설계되어 있으며, 상호 간의 연계를 통해 유연하고 유지보수 가능한 구조를 구현한다.

Interface Manager는 NSCP에서 외부 통신 어댑터 역할을 수행하는 컴포넌트로, 통신 미들웨어의 Application Programming Interface(API)를 호출하여 모듈 외부와의 송신 및 수신 기능을 담당한다. 본 컴포넌트는 GFE(Government Furnished Equipment) 및 CSDB(Combat System Data Bus) 등 다양한 외부 체계와의 연동을 지원하기 위해, 연결된 통신 방식에 따라 다수의 콘크리트 클래스로 구성될 수 있으며, 동시에 여러 개의 클래스 인스턴스를 가질 수 있도록 설계되어 있다.

Interface Manager를 통해 수신된 외부 데이터는 Message Converter로 전달되며, 이 컴포넌트는 데이터를 NSCP 내부에서 사용하는 구조체 형태로 변환한다. 반대로 송신 시에는 내부 데이터를 외부 체계가 요구하는 메시지 형식으로 가공하여 Interface Manager로 전달한다. 변환 로직은 메시지의 구조나 기능 목적에 따라 달라지므로, 일부는 모듈 개발자가 개별적으로 구현할 수 있도록 유연하게 설계되어 있다.

Message Converter에서 변환된 데이터는 Function Manager로 전달된다. Function Manager는 전달받은 메시지의 명령 코드나 항목 정보를 분석하여, 해당 메시지를 처리할 적절한 하위 기능 모듈인 Subfunction Manager를 식별하고 데이터를 분배한다. 또한 기능 처리 결과를 수집하여 상위 컴포넌트로 전달하는 역할도 수행함으로써, NSCP 내 데이터 흐름의 중추적인 조정자로 작동한다.

마지막으로, Subfunction Manager는 Function Manager로부터 전달된 데이터를 기반으로 실제 기능 로직을 수행하는 컴포넌트이다. 전투체계 내 센서, 무기, 표적처리 등 다양한 기능 단위로 구성되며, 각 기능별로 독립적으로 개발된다. 기능 수행 후 생성된 결과는 Function Manager를 통해 다시 상위 컴포넌트로 전달되며, 필요 시 외부 체계로의 송신을 위해 Message Converter와 Interface Manager를 통해 외부로 출력된다.

이와 같은 구조는 각 기능 간의 결합도를 낮추고, 데이터 흐름을 명확히 하며, 다양한 연동 요구에 대한 확장성과 재사용성을 동시에 확보할 수 있도록 한다.
